package Forme;

import Domen.Klijent;
import Domen.Kozmeticar;
import Domen.StavkaZakazivanja;
import Domen.Termin;
import Domen.Usluga;
import Domen.ZakazivanjeTermina;
import KlijentskiZahtev.IzmeniTerminZahtev;
import KlijentskiZahtev.PretraziUslugeZahtev;
import KlijentskiZahtev.TipoviZahteva;
import KlijentskiZahtev.VratiKozmeticareZahtev;
import ServerskiOdgovor.IzmeniTerminOdgovor;
import ServerskiOdgovor.PretraziUslugeOdgovor;
import ServerskiOdgovor.VratiKozmeticareOdgovor;
import ServerskiOdgovor.VratiSveKlijenteOdgovor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import komunikacija.KomunikacijaSaServerom;

public class TerminIzmenaForma extends javax.swing.JFrame {

    private Termin t;

    public TerminIzmenaForma(Termin t) {
        initComponents();
        this.t = t;

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        txtVreme = new javax.swing.JTextField();
        btnNazad = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Izmena termina");

        jLabel2.setText("Datum \"dd.MM.yyyy\"");

        jLabel3.setText("Vreme \"hh:mm\"");

        btnNazad.setText("Nazad");
        btnNazad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNazadActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnNazad)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSacuvaj))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addGap(78, 78, 78)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtDatum, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                                .addComponent(txtVreme)))))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtVreme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(272, 272, 272)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNazad)
                    .addComponent(btnSacuvaj))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNazadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNazadActionPerformed
        // TODO add your handling code here:
        IzmenaTerminaForma itf = new IzmenaTerminaForma();
        this.setVisible(false);
        itf.setVisible(true);
    }//GEN-LAST:event_btnNazadActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            // TODO add your handling code here:
            SimpleDateFormat datumFormat = new SimpleDateFormat("dd.MM.yyyy");
            SimpleDateFormat vremeFormat = new SimpleDateFormat("hh:mm");

            String dat = txtDatum.getText();
            String vr = txtVreme.getText();

            java.util.Date datumUtil = null;
            java.sql.Time vremeSql = null;

            datumUtil = datumFormat.parse(dat);
            vremeSql = new Time(vremeFormat.parse(vr).getTime());

            Termin termin = new Termin(t.getTerminId(), datumUtil, (Time) vremeSql);
            
            IzmeniTerminZahtev zahtev = new IzmeniTerminZahtev(termin);

            KomunikacijaSaServerom.getInstanca().getOos().writeInt(TipoviZahteva.IZMENI_TERMIN_ZAHTEV);
            KomunikacijaSaServerom.getInstanca().getOos().writeObject(zahtev);

            int tipOdgovora = KomunikacijaSaServerom.getInstanca().getOis().readInt();
            IzmeniTerminOdgovor odgovor = (IzmeniTerminOdgovor) KomunikacijaSaServerom.getInstanca().getOis().readObject();

            if (odgovor.isUspeo()) {
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio termin");
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti termin");
            }
        } catch (ParseException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TerminIzmenaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TerminIzmenaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TerminIzmenaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TerminIzmenaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new TerminIzmenaForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNazad;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtVreme;
    // End of variables declaration//GEN-END:variables

    /*private void popuniCmbKozmeticar() {
        try {
            ObjectOutputStream oos = KomunikacijaSaServerom.getInstanca().getOos();
            ObjectInputStream ois = KomunikacijaSaServerom.getInstanca().getOis();
            VratiKozmeticareZahtev zahtev = new VratiKozmeticareZahtev("");
            oos.writeInt(TipoviZahteva.VRATI_KOZMETICARE_ZAHTEV);
            oos.writeObject(zahtev);
            oos.flush();

            int tipOdgovora = ois.readInt();
            VratiKozmeticareOdgovor odgovor = (VratiKozmeticareOdgovor) ois.readObject();
            cmbKozmeticari.removeAllItems();

            for (Kozmeticar kozmeticar : odgovor.getListaKozmeticara()) {
                cmbKozmeticari.addItem(kozmeticar);
            }
        } catch (IOException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniCmbKlijent() {
        try {
            ObjectOutputStream oos = KomunikacijaSaServerom.getInstanca().getOos();
            ObjectInputStream ois = KomunikacijaSaServerom.getInstanca().getOis();
            oos.writeInt(TipoviZahteva.VRATI_SVE_KLIJENTE_ZAHTEV);
            oos.flush();

            int tipOdgovora = ois.readInt();
            VratiSveKlijenteOdgovor odgovor = (VratiSveKlijenteOdgovor) ois.readObject();
            cmbKlijenti.removeAllItems();

            for (Klijent klijent : odgovor.getListaKlijenata()) {
                cmbKlijenti.addItem(klijent);
            }
        } catch (IOException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniCmbUsluge() {
        try {
            ObjectOutputStream oos = KomunikacijaSaServerom.getInstanca().getOos();
            ObjectInputStream ois = KomunikacijaSaServerom.getInstanca().getOis();

            PretraziUslugeZahtev zahtev = new PretraziUslugeZahtev("");
            oos.writeInt(TipoviZahteva.PRETRAZI_USLUGE_ZAHTEV);
            oos.writeObject(zahtev);
            oos.flush();

            int tipOdgovora = ois.readInt();
            PretraziUslugeOdgovor odgovor = (PretraziUslugeOdgovor) ois.readObject();
            cmbUsluge.removeAllItems();

            for (Usluga usluga : odgovor.getNizUsluga()) {
                cmbUsluge.addItem(usluga);
            }
        } catch (IOException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TerminIzmenaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }*/

}
